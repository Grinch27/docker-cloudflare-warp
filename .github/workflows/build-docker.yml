name: Build Docker

on:
  schedule:
    - cron: "0 0 * * *"
  repository_dispatch:
  workflow_dispatch:
    inputs:
      tools_branch:
        description: "Select openwrt branch"
        required: true
        default: "warp"
        type: choice
        options:
          - warp
      # device_branch:
      #   description: "Select device branch"
      #   required: true
      #   default: "all"
      #   type: choice
      #   options:
      #     - all
      arch_branch:
        description: "Select arch_branch"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - amd64
          - arm64

env:
  TZ: America/New_York
  tools_branch: ${{ inputs.tools_branch || 'warp' }}
  arch_branch: ${{ inputs.arch_branch || 'all' }}

jobs:
  build:
    name: Build Docker
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Clear workspace
        working-directory: ${{ github.workspace }}
        run: |
          echo -e "Current working directory: $(pwd)"
          rm -rf ${{ github.workspace }}/*
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      # - name: Install cosign
      #   if: github.event_name != 'pull_request'
      #   uses: sigstore/cosign-installer@main

      - name: Set environment variable ${{ inputs.arch_branch }}
        id: var
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          # ========== Set repo branch ==========
          repo_diy="https://github.com/$GITHUB_REPOSITORY"
          repo_diy_owner="$GITHUB_REPOSITORY_OWNER"

          echo "repo_diy=${repo_diy}" >> "$GITHUB_ENV"
          echo "repo_diy_owner=${repo_diy_owner}" >> "$GITHUB_ENV"

          # ========== Build Path ==========
          dir_build="builder"
          dir_output="output"
          dir_backup="backup"
          dir_diy="DIY"
          # ---------- / ----------
          path_build="/${dir_build}"
          path_workspace="${path_build}/${tools_branch}"
          path_output="${path_build}/${dir_output}"
          path_backup="${path_build}/${dir_backup}"

          path_diy="${path_workspace}/${dir_diy}"

          echo "path_build=${path_build}" >> "$GITHUB_ENV"
          echo "path_workspace=${path_workspace}" >> "$GITHUB_ENV"
          echo "path_output=${path_output}" >> "$GITHUB_ENV"
          echo "path_backup=${path_backup}" >> "$GITHUB_ENV"

          echo "path_diy=${path_diy}" >> "$GITHUB_ENV"

          # ========== DIY Files ==========

          # ========== END ==========
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Check environment variable
        id: checkenv
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"
          echo -e "# ========== Repo Info =========="
          echo -e "repo_diy: ${repo_diy}"
          echo -e "repo_diy_owner: ${repo_diy_owner}"

          echo -e "# ========== Build Path =========="
          echo -e "path_build: ${path_build}"
          echo -e "path_workspace: ${path_workspace}"
          echo -e "path_output: ${path_output}"
          echo -e "path_backup: ${path_backup}"
          echo -e "path_diy: ${path_diy}"

          # ========== END ==========
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Checkout DIY
        uses: actions/checkout@main
        with:
          repository: ${{ github.repository }}
          ref: main
          fetch-depth: 1
          # Relative path under $GITHUB_WORKSPACE to place the repository
          path: ${{ github.event.repository.name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: linux/amd64,linux/arm64
          # platforms: ${{ env.arch_branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Log in to Docker Hub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # # Add cloudflare gpg key
      # && OS_ARCH=$(dpkg --print-architecture) \
      # && OS_VER=$(lsb_release -cs) \
      # && curl -fsSL https://pkg.cloudflareclient.com/pubkey.gpg | gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg \
      # && echo "deb [arch=${OS_ARCH} signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ ${OS_VER} main" > /etc/apt/sources.list.d/cloudflare-client.list \
      # # Install cloudflare-warp
      # && apt-get update \
      # && apt-get install -y \
      #     cloudflare-warp \

      - name: Get package version
        id: ver
        working-directory: ${{ github.workspace }}
        run: |
          echo -e "Current working directory: $(pwd)"

          # APT
          sudo -E apt-get -y -qq update
          sudo -E apt-get -y -qq install \
            ca-certificates \
            curl \
            gpg \
            lsb-release

          # Add cloudflare gpg key
          OS_ARCH=$(dpkg --print-architecture)
          OS_VER=$(lsb_release -cs)
          curl -fsSL https://pkg.cloudflareclient.com/pubkey.gpg | gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg
          echo "deb [arch=${OS_ARCH} signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ ${OS_VER} main" | sudo tee /etc/apt/sources.list.d/cloudflare-client.list

          # install
          sudo -E apt-get -y -qq update
          sudo -E apt-get -y -qq install \
            cloudflare-warp

          # dpkg -l <package-name>:<architecture>
          ver_amd64=$(dpkg-query -W -f='${Version}' cloudflare-warp)
          # ver_arm64=$(dpkg-query -W -f='${Version}' cloudflare-warp:arm64)

          # uninstall
          sudo -E apt-get -y -qq purge --autoremove \
            cloudflare-warp

          echo "version: $ver_amd64"
          echo "version=$ver_amd64" >> ${GITHUB_OUTPUT} # $GITHUB_ENV

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@master
        with:
          images: grinch27/cloudflare-warp
          tags: |
            type=raw,value=latest,enabled=true
            type=raw,value=${{ steps.ver.outputs.version }},enabled=true
          flavor: latest=false

      - name: Build and push Docker image
        uses: docker/build-push-action@master
        with:
          context: .
          file: ${{ github.workspace }}/${{ github.event.repository.name }}/Dockerfile
          no-cache: false
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # build-args: |
          #

      - name: Clear workspace
        working-directory: ${{ github.workspace }}
        run: |
          echo -e "Current working directory: $(pwd)"
          rm -rf ${{ github.workspace }}/*
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}
