name: Build Docker (Dev)

on:
  schedule:
    - cron: "0 0 * * *"
  repository_dispatch:
  workflow_dispatch:
    inputs:
      path_dockerfile:
        description: "dockerfile path in repo"
        required: true
        default: "Dockerfile"
        type: string
      arch_branch:
        description: "Input arch"
        required: true
        default: "linux/amd64,linux/arm64"
        type: string
      repo_dockerhub:
        description: "Docker Hub repository"
        required: true
        default: "grinch27/cloudflare-warp"
        type: string
      tag:
        description: "tag"
        required: true
        default: "dev"
        type: string
      version:
        description: "version"
        required: false
        default: "dev"
        type: string

env:
  TZ: UTC
  path_dockerfile: ${{ inputs.path_dockerfile || 'Dockerfile' }}
  arch_branch: ${{ inputs.arch_branch || 'linux/amd64,linux/arm64' }}
  repo_dockerhub: ${{ inputs.repo_dockerhub || 'grinch27/cloudflare-warp' }}
  tag: ${{ inputs.tag || 'dev' }}
  version: ${{ inputs.version }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    services:
      registry:
        image: registry:latest
        ports:
          - 5000:5000
    steps:
      - name: Checkout DIY
        uses: actions/checkout@main

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: ${{ env.arch_branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
        with:
          driver-opts: network=host

      - name: Build and push to local registry
        uses: docker/build-push-action@master
        with:
          context: .
          file: ${{ github.workspace }}/${{ env.path_dockerfile }}
          no-cache: false
          platforms: ${{ env.arch_branch }}
          load: false
          push: true
          tags: localhost:5000/${{ env.repo_dockerhub }}:${{ env.tag }}
          # labels: ${{ steps.meta.outputs.labels }}

      - name: Inspect
        run: |
          docker buildx imagetools inspect localhost:5000/${{ env.repo_dockerhub }}:${{ env.tag }}
          docker pull localhost:5000/${{ env.repo_dockerhub }}:${{ env.tag }}

      - name: Test Docker image
        id: test
        env:
          image: localhost:5000/${{ env.repo_dockerhub }}:${{ env.tag }}
          container_name: container-test
        run: |
          # docker run --name ${{ env.container_name }} --rm -d ${{ env.image }} sleep infinity
          docker run \
            --name ${{ env.container_name }} \
            --rm \
            -d \
            ${{ env.image }} \
            /bin/bash -c "uname -a && sleep infinity"

          # List all installed packages
          docker exec ${{ env.container_name }} dpkg -l

          # Execute command in Docker container
          version=$(docker exec ${{ env.container_name }} warp-cli --version | grep 'warp-cli' | awk '{print $2}')
          echo "version=$version"
          echo "version=$version" >> ${GITHUB_OUTPUT}

          # Stop Docker container
          docker stop ${{ env.container_name }}

          # Remove Docker image
          # docker rmi ${{ env.image }}

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Log in to Docker Hub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          # Create multi-architecture Docker image
          docker buildx imagetools create --tag ${{ env.repo_dockerhub }}:${{ env.tag }} localhost:5000/${{ env.repo_dockerhub }}:${{ env.tag }}

          # Push multi-architecture Docker image
          docker buildx imagetools push ${{ env.repo_dockerhub }}:${{ env.tag }}

      # - name: Tag and push Docker image with version and architecture
      #   env:
      #     version: ${{ steps.test.outputs.version }}
      #     ARCH_BRANCH: ${{ env.arch_branch }}
      #   run: |
      #     for arch in ${ARCH_BRANCH//,/ }
      #     do
      #       docker tag localhost:5000/${{ env.repo_dockerhub }}:latest localhost:5000/${{ env.repo_dockerhub }}:${{ env.version }}-$arch
      #       docker push localhost:5000/${{ env.repo_dockerhub }}:${{ env.version }}-$arch
      #     done
